From 81ad17c3750c0f42cc5d420e8b7cc3be32208672 Mon Sep 17 00:00:00 2001
From: Jason Lau <lau@rapidstream-da.com>
Date: Tue, 3 Sep 2024 14:01:19 -0700
Subject: [PATCH] Add TAPA pragmas to Clang

---
 clang/include/clang/Basic/Attr.td | 33 ++++++++++++++++
 clang/lib/Sema/SemaDeclAttr.cpp   | 62 +++++++++++++++++++++++++++++++
 clang/lib/Sema/SemaStmtAttr.cpp   | 48 ++++++++++++++++++++++++
 3 files changed, 143 insertions(+)

diff --git a/clang/include/clang/Basic/Attr.td b/clang/include/clang/Basic/Attr.td
index 46d0a66d59c3..4e4c52ced4f8 100644
--- a/clang/include/clang/Basic/Attr.td
+++ b/clang/include/clang/Basic/Attr.td
@@ -4719,3 +4719,36 @@ def ClspvLibclcBuiltin: InheritableAttr {
   let Documentation = [ClspvLibclcBuiltinDoc];
   let SimpleHandler = 1;
 }
+
+// Begin TAPA
+
+def TapaPipeline : Attr {
+  let Spellings = [GNU<"tapa_pipeline">,
+                   CXX11<"tapa","pipeline">,
+                   C23<"tapa", "pipeline">];
+  let Args = [IntArgument<"II", /* optional */1>];
+  let Documentation = [Undocumented];
+}
+
+def TapaUnroll : Attr {
+  let Spellings = [GNU<"tapa_unroll">,
+                   CXX11<"tapa","unroll">,
+                   C23<"tapa", "unroll">];
+  let Args = [IntArgument<"Factor", /* optional */1>];
+  let Documentation = [Undocumented];
+}
+
+def TapaTarget : Attr {
+  let Spellings = [GNU<"tapa_target">,
+                   CXX11<"tapa","target">,
+                   C23<"tapa", "target">];
+  let Args = [EnumArgument<"Target", "TargetType", /*is_string=*/true,
+                           ["hls", "aie", "non_synthesizable"],
+                           ["HLS", "AIE", "NON_SYNTHESIZABLE"]>,
+              EnumArgument<"Vendor", "VendorType", /*is_string=*/true,
+                           ["xilinx"],
+                           ["Xilinx"], /* optional */1>];
+  let Documentation = [Undocumented];
+}
+
+// End TAPA
diff --git a/clang/lib/Sema/SemaDeclAttr.cpp b/clang/lib/Sema/SemaDeclAttr.cpp
index e2eada24f9fc..8f5c69a759d2 100644
--- a/clang/lib/Sema/SemaDeclAttr.cpp
+++ b/clang/lib/Sema/SemaDeclAttr.cpp
@@ -159,6 +159,55 @@ bool Sema::checkStringLiteralArgumentAttr(const ParsedAttr &AL, unsigned ArgNum,
   return checkStringLiteralArgumentAttr(AL, ArgExpr, Str, ArgLocation);
 }
 
+// Begin TAPA
+
+static void handleTapaPipelineAttr(Sema &S, Decl *D, const ParsedAttr &AL) {
+  uint32_t ii = 0;
+  if (AL.getNumArgs()) {
+    if (!S.checkUInt32Argument(AL, AL.getArgAsExpr(0), ii)) return;
+  }
+
+  D->addAttr(::new (S.Context) TapaPipelineAttr(S.Context, AL, ii));
+}
+
+static void handleTapaUnrollAttr(Sema &S, Decl *D, const ParsedAttr &AL) {
+  S.Diag(D->getBeginLoc(), diag::warn_attribute_type_not_supported)
+      << AL << "unsupported unroll target";
+}
+
+static void handleTapaTargetAttr(Sema &S, Decl *D, const ParsedAttr &AL) {
+  StringRef TargetStr, VendorStr;
+  SourceLocation ArgLoc;
+
+  if (AL.getNumArgs() == 0)
+    TargetStr = "hls";
+  else if (!S.checkStringLiteralArgumentAttr(AL, 0, TargetStr, &ArgLoc))
+    return;
+
+  TapaTargetAttr::TargetType Target;
+  if (!TapaTargetAttr::ConvertStrToTargetType(TargetStr, Target)) {
+    S.Diag(AL.getLoc(), diag::warn_attribute_type_not_supported)
+        << AL << TargetStr << ArgLoc;
+    return;
+  }
+
+  if (AL.getNumArgs() == 1)
+    VendorStr = "xilinx";
+  else if (!S.checkStringLiteralArgumentAttr(AL, 1, VendorStr, &ArgLoc))
+    return;
+
+  TapaTargetAttr::VendorType Vendor;
+  if (!TapaTargetAttr::ConvertStrToVendorType(VendorStr, Vendor)) {
+    S.Diag(AL.getLoc(), diag::warn_attribute_type_not_supported)
+        << AL << VendorStr << ArgLoc;
+    return;
+  }
+
+  D->addAttr(::new (S.Context) TapaTargetAttr(S.Context, AL, Target, Vendor));
+}
+
+// End TAPA
+
 /// Check if the passed-in expression is of type int or bool.
 static bool isIntOrBool(Expr *Exp) {
   QualType QT = Exp->getType();
@@ -7100,6 +7149,19 @@ ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D, const ParsedAttr &AL,
   case ParsedAttr::AT_VTablePointerAuthentication:
     handleVTablePointerAuthentication(S, D, AL);
     break;
+
+  // Tapa attributes.
+  case ParsedAttr::AT_TapaPipeline:
+    handleTapaPipelineAttr(S, D, AL);
+    break;
+
+  case ParsedAttr::AT_TapaUnroll:
+    handleTapaUnrollAttr(S, D, AL);
+    break;
+
+  case ParsedAttr::AT_TapaTarget:
+    handleTapaTargetAttr(S, D, AL);
+    break;
   }
 }
 
diff --git a/clang/lib/Sema/SemaStmtAttr.cpp b/clang/lib/Sema/SemaStmtAttr.cpp
index 7f452d177c16..63955cce53d7 100644
--- a/clang/lib/Sema/SemaStmtAttr.cpp
+++ b/clang/lib/Sema/SemaStmtAttr.cpp
@@ -189,6 +189,50 @@ static Attr *handleLoopHintAttr(Sema &S, Stmt *St, const ParsedAttr &A,
   return LoopHintAttr::CreateImplicit(S.Context, Option, State, ValueExpr, A);
 }
 
+// Begin TAPA
+
+static Attr *handleTapaPipelineAttr(Sema &S, Stmt *St, const ParsedAttr &A,
+                                    SourceRange) {
+  uint32_t ii = 0;
+  if (A.getNumArgs()) {
+    if (!S.checkUInt32Argument(A, A.getArgAsExpr(0), ii))
+      return nullptr;
+  }
+
+  if (St->getStmtClass() != Stmt::DoStmtClass &&
+      St->getStmtClass() != Stmt::ForStmtClass &&
+      St->getStmtClass() != Stmt::CXXForRangeStmtClass &&
+      St->getStmtClass() != Stmt::WhileStmtClass) {
+    S.Diag(St->getBeginLoc(), diag::warn_attribute_type_not_supported)
+        << A << "unsupported pipeline target";
+    return nullptr;
+  }
+
+  return ::new (S.Context) TapaPipelineAttr(S.Context, A, ii);
+}
+
+static Attr *handleTapaUnrollAttr(Sema &S, Stmt *St, const ParsedAttr &A,
+                                  SourceRange) {
+  uint32_t factor = 0;
+  if (A.getNumArgs()) {
+    if (!S.checkUInt32Argument(A, A.getArgAsExpr(0), factor))
+      return nullptr;
+  }
+
+  if (St->getStmtClass() != Stmt::DoStmtClass &&
+      St->getStmtClass() != Stmt::ForStmtClass &&
+      St->getStmtClass() != Stmt::CXXForRangeStmtClass &&
+      St->getStmtClass() != Stmt::WhileStmtClass) {
+    S.Diag(St->getBeginLoc(), diag::warn_attribute_type_not_supported)
+        << A << "unsupported unroll target";
+    return nullptr;
+  }
+
+  return ::new (S.Context) TapaUnrollAttr(S.Context, A, factor);
+}
+
+// End TAPA
+
 namespace {
 class CallExprFinder : public ConstEvaluatedExprVisitor<CallExprFinder> {
   bool FoundAsmStmt = false;
@@ -672,6 +716,10 @@ static Attr *ProcessStmtAttribute(Sema &S, Stmt *St, const ParsedAttr &A,
     return handleCodeAlignAttr(S, St, A);
   case ParsedAttr::AT_MSConstexpr:
     return handleMSConstexprAttr(S, St, A, Range);
+  case ParsedAttr::AT_TapaPipeline:
+    return handleTapaPipelineAttr(S, St, A, Range);
+  case ParsedAttr::AT_TapaUnroll:
+    return handleTapaUnrollAttr(S, St, A, Range);
   default:
     // N.B., ClangAttrEmitter.cpp emits a diagnostic helper that ensures a
     // declaration attribute is not written on a statement, but this code is
-- 
2.34.1

