"""Pack the generated RTL into a Xilinx object file."""

__copyright__ = """
Copyright (c) 2024 RapidStream Design Automation, Inc. and contributors.
All rights reserved. The contributor(s) of this file has/have agreed to the
RapidStream Contributor License Agreement.
"""

import logging
import os
from pathlib import Path
from typing import Literal

import click

from tapa.common.target import Target
from tapa.steps.common import is_pipelined, load_persistent_context, load_tapa_program

_logger = logging.getLogger().getChild(__name__)

VITIS_COMMAND_BASIC = [
    "v++ ${DEBUG} \\",
    "  --link \\",
    '  --output "${OUTPUT_DIR}/${TOP}_${PLATFORM}.xclbin" \\',
    "  --kernel ${TOP} \\",
    "  --platform ${PLATFORM} \\",
    "  --target ${TARGET} \\",
    "  --report_level 2 \\",
    '  --temp_dir "${OUTPUT_DIR}/${TOP}_${PLATFORM}.temp" \\',
    "  --optimize 3 \\",
    "  --connectivity.nk ${TOP}:1:${TOP} \\",
    "  --save-temps \\",
    '  "${XO}" \\',
    "  --vivado.synth.jobs ${MAX_SYNTH_JOBS} \\",
    "  --vivado.prop=run.impl_1.STEPS.PHYS_OPT_DESIGN.IS_ENABLED=1 \\",
    "  --vivado.prop=run.impl_1.STEPS.OPT_DESIGN.ARGS.DIRECTIVE=$STRATEGY \\",
    "  --vivado.prop=run.impl_1.STEPS.PLACE_DESIGN.ARGS.DIRECTIVE=$PLACEMENT_STRATEGY \\",  # noqa: E501
    "  --vivado.prop=run.impl_1.STEPS.PHYS_OPT_DESIGN.ARGS.DIRECTIVE=$STRATEGY \\",
    "  --vivado.prop=run.impl_1.STEPS.ROUTE_DESIGN.ARGS.DIRECTIVE=$STRATEGY \\",
]
CONFIG_OPTION = ['  --config "${CONFIG_FILE}" \\']
CLOCK_OPTION = ["  --kernel_frequency ${TARGET_FREQUENCY} \\"]
NEWLINE = [""]


@click.command()
@click.option(
    "--output",
    "-o",
    type=click.Path(dir_okay=False, writable=True),
    required=False,
    help="Output packed .xo Xilinx object file.",
)
@click.option(
    "--bitstream-script",
    "-s",
    type=click.Path(dir_okay=False, writable=True),
    help="Script file to generate the bitstream.",
)
@click.option(
    "--custom-rtl",
    multiple=True,
    type=Path,
    default=(),
    help="Add rtl files or folders to the project. "
    "The rtl will replace the default rtl "
    "generated by TAPA. Currently only support .v format. "
    'Use [[tapa::target("non_synthesizable", "xilinx")]] to generate the'
    "template for the custom rtl",
)
@click.option(
    "--graphir-path",
    type=Path,
    default=None,
    help="Path to the GraphIR file."
    "If provided, the GraphIR will be exported and included in the .xo file. ",
)
def pack(
    output: str | None,
    bitstream_script: str | None,
    custom_rtl: tuple[Path, ...],
    graphir_path: Path | None = None,
) -> None:
    """Pack the generated RTL into a Xilinx object file."""
    program = load_tapa_program()
    settings = load_persistent_context("settings")
    target = Target(settings.get("target"))

    if target == Target.XILINX_AIE:
        return

    if custom_rtl:
        templates_info = load_persistent_context("templates_info")
        program.replace_custom_rtl(custom_rtl, templates_info)

    if target == Target.XILINX_VITIS:
        output = _enforce_path_suffix(
            output, suffix=".xo", reason="you are in Vitis mode"
        )
        program.pack_xo(output, graphir_path)
        if bitstream_script is not None:
            with open(bitstream_script, "w", encoding="utf-8") as script:
                script.write(
                    get_vitis_script(
                        program.top,
                        output,
                        settings.get("platform", None),
                        settings.get("clock-period", None),
                        settings.get("connectivity", None),
                    )
                )
                _logger.info("generate the v++ script at %s", bitstream_script)
    else:
        output = _enforce_path_suffix(
            output, suffix=".zip", reason="you are not in Vitis mode"
        )
        program.pack_zip(
            output,
            graph=load_persistent_context("graph"),
            settings=load_persistent_context("settings"),
        )
        if bitstream_script is not None:
            _logger.warning(
                "you are not in Vitis mode, the bitstream script will not be generated."
            )

    is_pipelined("pack", True)


def _enforce_path_suffix(
    path: str | None,
    suffix: Literal[".xo", ".zip"],
    reason: str,
) -> str:
    if path is None:
        path = f"work{suffix}"
    if not path.endswith(suffix):
        path = f"{path}{suffix}"
        _logger.warning(
            "%s, the generated RTL will be packed into a %s file: %s.",
            reason,
            suffix,
            path,
        )
    return path


def get_vitis_script(
    top: str,
    output_file: str,
    platform: str | None,
    clock_period: str | None,
    connectivity: str | None,
) -> str:
    """Generate v++ commands to run implementation."""
    script = []
    script.append("#!/bin/bash")

    vitis_command = VITIS_COMMAND_BASIC

    script.extend(("TARGET=hw", "# TARGET=hw_emu", "# DEBUG=-g"))
    script += NEWLINE

    script.append(f"TOP={top}")
    script.append(f"XO='{os.path.abspath(output_file)}'")

    if connectivity:
        orig_config_path = os.path.abspath(connectivity)
        _logger.info(
            "use the original connectivity configuration at %s in the v++ script",
            orig_config_path,
        )
        script.append(f"CONFIG_FILE='{orig_config_path}'")
        vitis_command += CONFIG_OPTION
    else:
        _logger.warning(
            "No connectivity file is provided, skip this part in the v++ script.",
        )

    # if not specified in tapac, use platform default
    if clock_period:
        freq_mhz = round(1000 / float(clock_period))
        script.append(f"TARGET_FREQUENCY={freq_mhz}")
        vitis_command += CLOCK_OPTION
    else:
        script.append('>&2 echo "Using the default clock target of the platform."')

    # if platform not specified in tapac, need to manually add it
    if platform:
        script.append(f"PLATFORM={platform}")
    else:
        script.append('PLATFORM=""')
        warning_msg = (
            'Please edit this file and set a valid PLATFORM= on line "${LINENO}"'
        )
        script.append(f"if [ -z $PLATFORM ]; then echo {warning_msg}; exit; fi")
        script += NEWLINE

    script.append(r'OUTPUT_DIR="$(pwd)/vitis_run_${TARGET}"')
    script += NEWLINE

    script.append(r"MAX_SYNTH_JOBS=8")
    script.append(r'STRATEGY="Explore"')
    script.append(r'PLACEMENT_STRATEGY="EarlyBlockPlacement"')
    script += NEWLINE

    script += vitis_command
    script += NEWLINE

    return "\n".join(script)
