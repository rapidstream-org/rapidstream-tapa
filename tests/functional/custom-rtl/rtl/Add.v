// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="Add_Add,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.342000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=502,HLS_SYN_LUT=456,HLS_VERSION=2024_1}" *)

module Add (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_s_dout,
        a_s_empty_n,
        a_s_read,
        a_peek_dout,
        a_peek_empty_n,
        a_peek_read,
        b_s_dout,
        b_s_empty_n,
        b_s_read,
        b_peek_dout,
        b_peek_empty_n,
        b_peek_read,
        c_s_din,
        c_s_full_n,
        c_s_write,
        c_peek,
        n
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [32:0] a_s_dout;
input   a_s_empty_n;
output   a_s_read;
input  [32:0] a_peek_dout;
input   a_peek_empty_n;
output   a_peek_read;
input  [32:0] b_s_dout;
input   b_s_empty_n;
output   b_s_read;
input  [32:0] b_peek_dout;
input   b_peek_empty_n;
output   b_peek_read;
output  [32:0] c_s_din;
input   c_s_full_n;
output   c_s_write;
input  [32:0] c_peek;
input  [63:0] n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_s_read;
reg b_s_read;
reg c_s_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_start;
wire    grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_done;
wire    grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_idle;
wire    grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_ready;
wire    grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_a_s_read;
wire    grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_b_s_read;
wire   [32:0] grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_c_s_din;
wire    grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_c_s_write;
reg    grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_start_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_start_reg = 1'b0;
end

Add_Add_Pipeline_VITIS_LOOP_32_1 grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_start),
    .ap_done(grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_done),
    .ap_idle(grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_idle),
    .ap_ready(grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_ready),
    .a_s_dout(a_s_dout),
    .a_s_empty_n(a_s_empty_n),
    .a_s_read(grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_a_s_read),
    .b_s_dout(b_s_dout),
    .b_s_empty_n(b_s_empty_n),
    .b_s_read(grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_b_s_read),
    .c_s_din(grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_c_s_din),
    .c_s_full_n(c_s_full_n),
    .c_s_write(grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_c_s_write),
    .n(n)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_start_reg <= 1'b1;
        end else if ((grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_ready == 1'b1)) begin
            grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_s_read = grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_a_s_read;
    end else begin
        a_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_s_read = grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_b_s_read;
    end else begin
        b_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_s_write = grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_c_s_write;
    end else begin
        c_s_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_peek_read = 1'b0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_peek_read = 1'b0;

assign c_s_din = grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_c_s_din;

assign grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_start = grp_Add_Pipeline_VITIS_LOOP_32_1_fu_90_ap_start_reg;

endmodule //Add
